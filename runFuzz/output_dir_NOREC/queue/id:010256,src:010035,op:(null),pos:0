CREATE VIRTUAL TABLE v0 USING rtree ( c1, c2, c3, c4, c5 ); 
SELECT a6.c1 + ( SELECT max ( a6.c2 ) FROM v0 AS a9 ORDER BY 18446744071562067968 ), a6.c3 + ( SELECT a8.c4 = a6.c2 || a8.c1 FROM v0 AS a8 ORDER BY 18446744071562067968 ), a6.c3 + ( SELECT max ( a6.c5 ) FROM v0 AS a7 ORDER BY 18446744071562067968 ) FROM v0 AS a6 ORDER BY 1; 
CREATE VIEW v10 AS SELECT c1, c4 FROM v0 AS a11 WHERE c5 LIKE NOT ( CASE WHEN c3 != 'x' THEN 18446744071562067968 ELSE 100 END ) ORDER BY 18446744073709551488; 
INSERT INTO v0 SELECT * FROM v10 AS a12, v10 AS a13 NATURAL JOIN v0 AS a14 ORDER BY 8 ON CONFLICT ( c1 ) DO UPDATE SET c3 = c5, c1 = c2; 
INSERT INTO v10 ( c2, c2, c5 ) VALUES ( 8, 8, 0 ), ( 18446744071562067968, 0, 18446744071562067968 ); 
SELECT COUNT ( * ) FROM v0 AS a15 WHERE a15.c1 ORDER BY 0; 
SELECT COUNT ( * ) FROM v10 AS a16, v10 AS a17 WHERE a16.c5 ORDER BY 0; 
SELECT COUNT ( * ) FROM v10 AS a18 WHERE ( ( ( 0, 18446744071562067968 ) ) % 100 ) == 18446744073709551488 ORDER BY 8; 
SELECT COUNT ( * ) FROM v0 AS a19, v0 AS a20, v0 AS a21 WHERE a21.c2 ORDER BY 0; 
SELECT COUNT ( * ) FROM v0 AS a22, v10 AS a23 WHERE a22.c3 ORDER BY 0; 
SELECT COUNT ( * ) FROM v10 AS a24 WHERE a24.c5 ORDER BY 18446744073709551488; 
SELECT COUNT ( * ) FROM v0 AS a25 WHERE a25.c5 ORDER BY 18446744073709551615; 
SELECT COUNT ( * ) FROM v0 AS a26 WHERE a26.c5 ORDER BY 1; 
SELECT COUNT ( * ) FROM v10 AS a27 WHERE a27.c2 IS a27.c2 > 18446744071562067968 = 18446744073709551488 ORDER BY 18446744073709551488; 
SELECT COUNT ( * ) FROM v10 AS a28, v0 AS a29 NATURAL JOIN v0 AS a30 NATURAL JOIN v0 AS a31 WHERE a30.c1 ORDER BY 0; 
