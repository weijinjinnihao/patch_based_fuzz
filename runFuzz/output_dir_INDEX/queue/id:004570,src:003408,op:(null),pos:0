CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE INDEX i3 ON v0 ( c2 ); 
CREATE VIRTUAL TABLE v4 USING rtree ( c5, c6, c7 ); 
INSERT INTO v0 VALUES ( 'x', 18446744071562067968, 18446744071562067968 ); 
INSERT INTO v4 VALUES ( 18446744071562067968, 18446744073709551615, 18446744073709551615 ), ( 18446744071562067968, 18446744073709551615, 18446744071562067968 ), ( 18446744071562067968, 18446744071562067968, 18446744071562067968 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v0 BEGIN DELETE FROM v4 WHERE c6 = c7; END; 
CREATE INDEX i8 ON v0 ( c2 ); 
CREATE INDEX i9 ON v4 ( c5 ); 
INSERT INTO v0 VALUES ( ( ( c1 + 18446744071562067968 ) % 18446744071562067968 ) < 18446744071562067968, 'x', 'maggy' ); 
ALTER TABLE v4 RENAME TO v10; 
CREATE INDEX i11 ON v10 ( c5 ); 
UPDATE v10 SET c7 = 'v0' WHERE c7 = 18446744071562067968; 
SELECT * FROM v10 AS a12 ORDER BY 18446744071562067968; 
VALUES ( 18446744071562067968, 18446744073709518848, 16 ), ( 10, 18446744071562067968, 18446744071562067968 ), ( 18446744071562067968, x'b1', 16 ) ORDER BY 16; 
SELECT a13.c7, count ( ( NOT ( a13.c7 IS NULL ) ) AND ( NOT ( a13.c6 IS NULL ) ) ) FROM v10 AS a13 ORDER BY 127; 
SELECT * FROM v10 AS a14 ORDER BY ( CASE WHEN a14.c7 != 'y' THEN 18446744073709518848 ELSE 18446744071562067968 END ); 
SELECT a15.c5, max ( a15.c7 || a15.c6 ) FROM v10 AS a15 ORDER BY 18446744071562067968; 
SELECT * FROM v10 AS a16, v10 AS a17 ORDER BY 16; 
WITH RECURSIVE v0 AS ( SELECT 0 y ORDER BY 18446744073709518848 ) SELECT * FROM v10 AS a18 ORDER BY 18446744071562067968; 
SELECT * FROM v10 AS a19 ORDER BY 2147483647; 
SELECT * FROM v0 AS a20 ORDER BY 10; 
SELECT * FROM v10 AS a21 ORDER BY 18446744071562067968; 
