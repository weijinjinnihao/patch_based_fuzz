CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE INDEX i3 ON v0 ( c1 ); 
CREATE VIRTUAL TABLE v4 USING rtree ( c5, c6, c7 ); 
INSERT INTO v0 VALUES ( 0, 'x' ), ( 0, 'v1' ), ( 0, 'x' ); 
CREATE INDEX i8 ON v0 ( c2 ); 
CREATE TABLE v9 ( c10 INTEGER CHECK( 0 ) PRIMARY KEY AUTOINCREMENT, c11 VARCHAR(255) ); 
CREATE INDEX i12 ON v9 ( c10 ); 
INSERT INTO v9 VALUES ( 18446744071562067968, 18446744071562067968, 18446744071562067968 ), ( 18446744071562067968, 18446744073709551615, 18446744071562067968 ), ( 2147483647, 0, 18446744071562067968 ); 
CREATE INDEX i13 ON v9 ( c11 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v4 BEGIN DELETE FROM v4; END; 
ALTER TABLE v4 RENAME TO v14; 
UPDATE v14 SET c7 = 'v0' WHERE c6 = 0; 
CREATE INDEX i15 ON v14 ( c6 ); 
SELECT * FROM v0 AS a16 WHERE a16.c1 IS NOT NULL >= 0 ORDER BY 100; 
SELECT * FROM v14 AS a17, v0 AS a18 NATURAL JOIN v14 AS a19 ORDER BY 18446744071562067968; 
SELECT count ( a20.c10 ) FROM v9 AS a20 ORDER BY 18446744073709551488; 
SELECT * ORDER BY 127; 
WITH v21 ( c23 ) AS ( SELECT 0 GROUP BY c7 HAVING automatic_index ( * ) >= 18446744071562067968 ORDER BY 18446744071562067968 ) SELECT * FROM v21 AS a22 ORDER BY 18446744073709551488; 
SELECT a25.c2, a24.c6 FROM v14 AS a24 NATURAL JOIN v0 AS a25 WHERE ( CASE WHEN a24.c7 != 'v1' THEN 18446744071562067968 ELSE 16 END ) ORDER BY 16; 
SELECT * FROM v14 AS a26 ORDER BY + a26.c5; 
WITH v0 AS ( SELECT hex ( ) y ORDER BY 16 ) SELECT * FROM v0 AS a27 ORDER BY 2147483647; 
SELECT * FROM v9 AS a28 WHERE a28.c1 = 0 ORDER BY 2147483647; 
SELECT * FROM v14 AS a29, v14 AS a30 ORDER BY 18446744071562067968; 
