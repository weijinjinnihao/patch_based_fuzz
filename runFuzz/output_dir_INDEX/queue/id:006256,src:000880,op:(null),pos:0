CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE VIRTUAL TABLE v3 USING rtree ( c4, c5, c6 ); 
CREATE INDEX i7 ON v0 ( c2 ); 
CREATE INDEX i8 ON v3 ( c1 ); 
INSERT INTO v3 VALUES ( 18446744071562067968, 'x' ), ( 18446744071562067968, 'v1' ), ( 18446744071562067968, 'C' ); 
INSERT INTO v0 VALUES ( 18446744071562067968, 30, 18446744071562067968 ), ( 18446744071562067968, 18446744071562067968, 18446744071562067968 ), ( 18446744071562067968, 18446744071562067968, 18446744071562067968 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v0 BEGIN INSERT INTO v3 VALUES ( 18446744071562067968, 0, 18446744071562067968 ), ( 18446744071562067968, 0, 18446744071562067968 ); END; 
CREATE INDEX i9 ON v0 ( c2 ); 
ALTER TABLE v0 RENAME TO v10; 
CREATE INDEX i11 ON v3 ( c5 ); 
CREATE INDEX i12 ON v10 ( c1 ); 
UPDATE v10 SET c1 = 'v0' WHERE c2 = 18446744071562067968; 
SELECT * FROM v10 AS a13 ORDER BY a13.c1 COLLATE NOCASE; 
WITH v10 AS ( SELECT hex ( ) y ORDER BY 18446744071562067968 ) SELECT * FROM v10 AS a14 ORDER BY 0; 
SELECT * FROM v10 AS a15, v3 AS a16 ORDER BY 18446744071562067968; 
SELECT count ( ( NOT ( a17.c1 IS NULL ) ) AND ( NOT ( a17.c2 IS NULL ) ) ) FROM v10 AS a17 ORDER BY 31; 
SELECT * FROM v10 AS a18 WHERE ( CASE WHEN a18.c1 != 'id.3' THEN 18446744071562067968 ELSE 18446744071562067968 END ) ORDER BY 127; 
SELECT * FROM v10 AS a19 WHERE a19.c2 > 18446744071562067968 ORDER BY 0; 
WITH RECURSIVE v20 AS ( SELECT c1 FROM v20 AS a22 WHERE c1 LIKE 'v1' ORDER BY 18446744071562067968 ) SELECT * FROM v20 AS a21 WHERE c1 > 0 ORDER BY 30; 
SELECT * FROM v3 AS a23 ORDER BY 18446744071562067968; 
SELECT * FROM v3 AS a24 WHERE a24.c1 = 18446744073709551488 ORDER BY 18446744071562067968; 
SELECT a27.c6 FROM v10 AS a25 LEFT JOIN v10 AS a26 ON ( a25.c1 = a25.c2 AND a26.c2 = 'x' ) LEFT JOIN v3 AS a27 ON ( a26.c2 = a26.c2 ) WHERE a27.c6 = 'v1' ORDER BY 0; 
