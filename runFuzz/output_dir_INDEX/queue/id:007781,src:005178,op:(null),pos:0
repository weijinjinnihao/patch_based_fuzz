CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE VIRTUAL TABLE v3 USING rtree ( c4, c5, c6, c7, c8, c9, c10, c11, c12 ); 
CREATE INDEX i13 ON v0 ( c2 ); 
CREATE VIEW v14 AS SELECT CASE WHEN c2 % 18446744073709551488 != 18446744073709551488 THEN c2 END, c1, c1 FROM v0 AS a15 WHERE c2 <= 18446744073709551488 ORDER BY 18446744073709551488; 
CREATE INDEX i16 ON v14 ( y ); 
CREATE INDEX i17 ON v14 ( y ); 
CREATE INDEX i18 ON v0 ( c1 ); 
CREATE INDEX i19 ON v14 ( y ); 
INSERT INTO v3 VALUES ( 100, 'v0' ), ( 18446744073709551488, 'v1' ), ( 18446744073709551488, 'e' ); 
INSERT INTO v3 VALUES ( 18446744073709551488, 18446744073709551488, 100 ), ( 18446744073709551488, 18446744073709518848, 18446744073709551488 ), ( 18446744073709551488, 8, 8 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v3 BEGIN DELETE FROM v14; END; 
ALTER TABLE v3 RENAME TO v20; 
UPDATE v20 SET c12 = 'v0' WHERE c2 = 255; 
SELECT * FROM v20 AS a21 GROUP BY a21.c2 HAVING automatic_index ( * ) >= 18446744073709551488 ORDER BY 18446744073709551488; 
SELECT * FROM v20 AS a22 ORDER BY 18446744073709551488; 
SELECT * FROM v0 AS a23 ORDER BY 18446744073709551488; 
SELECT * FROM v20 AS a24 ORDER BY 18446744073709551488; 
SELECT count ( ( NOT ( a25.y IS NULL ) ) AND ( NOT ( a25.y IS NULL ) ) ) FROM v14 AS a25 ORDER BY 8; 
SELECT * FROM v0 AS a26 ORDER BY 18446744073709551488; 
SELECT * FROM v20 AS a27 ORDER BY 16; 
SELECT abs ( y ) ORDER BY 18446744073709551488; 
WITH v14 AS ( SELECT * FROM v20 AS a29 ORDER BY a28.c2, a28.c8 ) SELECT count ( a28.c11 ), count ( v14.y ) FROM v20 AS a28 WHERE v14.y = + v14.y ORDER BY 100; 
SELECT count ( ( NOT ( a30.c10 IS NULL ) ) AND ( NOT ( a30.c7 IS NULL ) ) ) FROM v20 AS a30 ORDER BY 18446744073709551488; 
