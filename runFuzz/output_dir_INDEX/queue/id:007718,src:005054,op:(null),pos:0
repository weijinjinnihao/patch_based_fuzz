CREATE TABLE v0 ( c1 INT, c2 INTEGER, c3 TEXT, c4 REAL, c5 BLOB ) STRICT; 
CREATE INDEX i6 ON v0 ( c3 ); 
CREATE INDEX i7 ON v0 ( c5 ); 
CREATE INDEX i8 ON v0 ( c1 ); 
CREATE TABLE v9 ( c10 INT NOT NULL, c11 INTEGER NOT NULL, c12 TEXT NOT NULL, c13 REAL NOT NULL, c14 BLOB NOT NULL ) STRICT; 
CREATE TABLE v15 ( c16 COLLATE NOCASE PRIMARY KEY ON CONFLICT REPLACE, c17 UNIQUE ON CONFLICT IGNORE, c18 UNIQUE ON CONFLICT FAIL ) WITHOUT ROWID; 
CREATE TABLE v19 ( c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44 TEXT, c45, PRIMARY KEY ( c27, c27 ), UNIQUE ( c23 ) ); 
INSERT INTO v15 ( c17, c16, c18, c17, c16 ) VALUES ( 64000, 64000, 'hello', 64000, x'b1' ), ( 64000, 64000, 'x', 64000, x'b2b2b2' ); 
CREATE INDEX i46 ON v15 ( c16 ); 
CREATE INDEX i47 ON v19 ( c27 ); 
PRAGMA integrity_check; 
PRAGMA integrity_check ( 't1' ); 
UPDATE v0 SET c2 = ( SELECT c1 FROM v19 AS a48 WHERE c40 = 'v1' ORDER BY 64000 ); 
SELECT count ( ( WITH v9 AS ( SELECT 18446744073709551488 y ORDER BY 64000 ) SELECT * FROM v19 AS a50, v19 AS a51 NATURAL JOIN v0 AS a52 ORDER BY 64000 ) ) FROM v19 AS a49 y ORDER BY 127; 
SELECT * FROM v9 AS a53, v0 AS a54 NATURAL JOIN v9 AS a55 ORDER BY 9223372036854775807; 
SELECT * FROM v15 AS a56 ORDER BY 0; 
SELECT * ORDER BY 64000; 
SELECT a57.c16, count ( ( NOT ( a57.c16 IS NULL ) ) AND ( NOT ( a57.c16 IS NULL ) ) ) FROM v15 AS a57 ORDER BY 127; 
SELECT a58.c10, count ( ( NOT ( a58.c11 IS NULL ) ) AND ( NOT ( a58.c13 IS NULL ) ) ) FROM v9 AS a58 ORDER BY 9223372036854775807; 
SELECT * FROM v19 AS a59 GROUP BY a59.c20, a59.c35 < a59.c20 ORDER BY 127; 
WITH RECURSIVE v15 AS ( SELECT 64000 y ORDER BY 0 ) SELECT * FROM v9 AS a60 ORDER BY 64000; 
SELECT count ( ( NOT ( a61.c16 IS NULL ) ) AND ( NOT ( a61.c18 IS NULL ) ) ) FROM v15 AS a61 ORDER BY 0; 
SELECT a63.c16, count ( ( NOT ( a63.c16 IS NULL ) ) AND ( NOT ( a63.c18 IS NULL ) ) ), count ( ( NOT ( a63.c16 IS NULL ) ) AND ( NOT ( a63.c16 IS NULL ) ) ) FROM v0 AS a62 LEFT JOIN v15 AS a63 ON a62.c1 = a62.c4 ORDER BY max ( a63.c17 + a62.c1 * 64000 ) + 64000; 
