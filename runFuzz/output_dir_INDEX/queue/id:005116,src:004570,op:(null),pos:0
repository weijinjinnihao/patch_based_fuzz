CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE VIRTUAL TABLE v3 USING rtree ( c4, c5, c6 ); 
CREATE INDEX i7 ON v3 ( c6 ); 
CREATE INDEX i8 ON v0 ( c2 ); 
CREATE INDEX i9 ON v3 ( c5 ); 
INSERT INTO v3 VALUES ( 'x', 18446744073709551615, 18446744073709551615 ); 
INSERT INTO v0 VALUES ( 18446744073709551615, 18446744073709551615, 18446744073709551615 ), ( 18446744073709551615, 18446744073709551615, 18446744073709551615 ), ( 18446744073709551488, 18446744073709518848, 18446744073709551488 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v3 BEGIN DELETE FROM v0 WHERE c2 = c4; END; 
INSERT INTO v0 VALUES ( 'v0', 'x' ) ON CONFLICT ( c1 ) DO UPDATE SET c2 = c2, c2 = c1; 
CREATE INDEX i10 ON v0 ( c2 ); 
CREATE INDEX i11 ON v0 ( c1 ); 
ALTER TABLE v0 RENAME TO v12; 
UPDATE v12 SET c1 = 'x' WHERE c2 = 18446744073709551488; 
SELECT * FROM v12 AS a13, v12 AS a14 ORDER BY 18446744073709551615; 
SELECT * FROM v12 AS a15 WHERE CASE WHEN a15.c2 != 'v1' THEN 18446744073709518848 ELSE 2147483647 END > 18446744073709551615 ORDER BY 10; 
SELECT * FROM v12 AS a16 ORDER BY 18446744073709551615 COLLATE binary, 18446744073709551488 COLLATE hex; 
SELECT * FROM v3 AS a17 ORDER BY max ( a17.c6 + a17.c5 * 18446744073709551615 ) + 18446744073709551488, min ( a17.c4, avg ( a17.c4 ) ) + 18446744073709551615; 
SELECT a18.c2 IS ( a18.c2 || a18.c1 || a18.c2 ), a18.c1 FROM v12 AS a18 ORDER BY 18446744073709551615; 
SELECT * FROM v12 AS a19 ORDER BY 18446744073709551615; 
SELECT * FROM v12 AS a20 WHERE a20.c2 != a20.c1 ORDER BY 18446744073709551488; 
SELECT * FROM v12 AS a21 WHERE a21.c1 = a21.c1 NOT NULL ORDER BY 18446744073709551615; 
SELECT a22.c1, count ( a22.c2 ) FROM v12 AS a22 ORDER BY 2147483647; 
SELECT * FROM v3 AS a23, v12 AS a24 WHERE max ( a23.c5, a23.c4 ) > 2147483647 ORDER BY 9223372036854775807; 
