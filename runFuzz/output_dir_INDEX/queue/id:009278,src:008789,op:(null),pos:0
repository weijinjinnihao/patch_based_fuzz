CREATE TABLE v0 ( c1 INT, c2 INTEGER, c3 TEXT, c4 REAL, c5 BLOB ) STRICT; 
UPDATE v0 SET c4 = ( SELECT c4 FROM v0 AS a6, v0 AS a7 WHERE c1 = 'v1' ORDER BY 18446744073709551615 ); 
CREATE INDEX i8 ON v0 ( c1 ); 
CREATE INDEX i9 ON v0 ( c3 ); 
CREATE TABLE v10 ( c11 INTEGER PRIMARY KEY, c12 INTEGER NOT NULL CHECK( c13 > c15 ), c13 INTEGER NOT NULL CHECK( NOT NULL ), c14 INTEGER AS( c11 + c14 - c16 ) CHECK( c16 BETWEEN c15 AND c14 ), c15 INTEGER CHECK( c16 IS NOT NULL >= 18446744073709551615 ), c16 BLOB NOT NULL ) STRICT; 
CREATE TABLE v17 ( c18 COLLATE NOCASE PRIMARY KEY ON CONFLICT REPLACE, c19 UNIQUE ON CONFLICT IGNORE, c20 UNIQUE ON CONFLICT FAIL ) WITHOUT ROWID; 
PRAGMA quick_check = 10; 
CREATE INDEX i21 ON v10 ( c12 ); 
CREATE TABLE v22 ( c23, c24, c25, c26, c27 ); 
INSERT INTO v22 ( c25, c24, c26, c26, c23 ) VALUES ( 18446744073709551615, 18446744073709551615, 'v1', 10, x'b1' ), ( 4294967295, 18446744073709551488, 'v0', 10, x'b2b2b2' ); 
PRAGMA integrity_check; 
PRAGMA quick_check ( - 10 ); 
CREATE INDEX i28 ON v0 ( c5 ); 
UPDATE v17 SET c18 = ( SELECT c18 FROM v10 AS a29 WHERE c12 = 'v1' ORDER BY 100 ); 
CREATE INDEX i30 ON v17 ( c18 ); 
SELECT a31.c20, count ( ( NOT ( a31.c18 IS NULL ) ) AND ( NOT ( a31.c20 IS NULL ) ) ) FROM v17 AS a31 ORDER BY 18446744073709551615; 
SELECT max ( a32.c14 || a32.c15 ) FROM v10 AS a32 ORDER BY 10; 
SELECT * FROM v0 AS a33 ORDER BY 0; 
SELECT * FROM v10 AS a34, v0 AS a35 NATURAL JOIN v17 AS a36 ORDER BY 18446744073709551488; 
SELECT * FROM ( SELECT 10 ORDER BY 0 ) AS y, v17 AS a37 ON a37.c18 = a37.c18 || a37.c20 OR 0 WHERE hex ( 18446744073709551488 ) ORDER BY 18446744073709551615; 
WITH RECURSIVE v38 ( c40 ) AS ( SELECT 100 ORDER BY 18446744073709551615 ) SELECT * FROM v38 AS a39 ORDER BY 10; 
SELECT * FROM v22 AS a41 GROUP BY a41.c27 HAVING automatic_index ( * ) >= 16 ORDER BY 18446744073709551488; 
SELECT * FROM v0 AS a42, v17 AS a43 NATURAL JOIN v17 AS a44 ORDER BY 18446744073709551488; 
SELECT * FROM v17 AS a45 ORDER BY 9223372036854775807; 
SELECT * FROM v17 AS a46 ORDER BY 1; 
