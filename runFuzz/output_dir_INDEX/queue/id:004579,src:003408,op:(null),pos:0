CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE INDEX i3 ON v0 ( c2 ); 
CREATE VIRTUAL TABLE v4 USING rtree ( c5, c6, c7 ); 
INSERT INTO v4 VALUES ( 'v1', 10, 10 ); 
INSERT INTO v0 VALUES ( 10, 18446744071562067968, 18446744071562067968 ), ( 10, 18446744073709551615, 255 ), ( 255 = 'v0', 0, 255 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v0 BEGIN DELETE FROM v0 WHERE c2 = c2; END; 
CREATE INDEX i8 ON v4 ( c2 ); 
CREATE INDEX i9 ON v0 ( c1 ); 
CREATE INDEX i10 ON v0 ( c2 ); 
ALTER TABLE v4 RENAME TO v11; 
CREATE INDEX i12 ON v11 ( c6 ); 
UPDATE v11 SET c6 = 'v0' WHERE c7 = 10; 
SELECT * FROM v11 AS a13 ORDER BY 18446744071562067968; 
VALUES ( 4294967295, 10, 10 ), ( 18446744071562067968, 10, 10 ), ( 2.200000, x'b1', 18446744071562067968 ) ORDER BY 18446744073709551615; 
SELECT a14.c2, count ( ( NOT ( a14.c2 IS NULL ) ) AND ( NOT ( a14.c2 IS NULL ) ) ) FROM v0 AS a14 ORDER BY 0; 
SELECT * FROM v0 AS a15 ORDER BY ( CASE WHEN a15.c2 != '40000 400 1' THEN 18446744073709518848 ELSE 127 END ); 
SELECT a16.c5, max ( a16.c7 || a16.c2 ) FROM v11 AS a16 ORDER BY 127; 
SELECT * FROM v11 AS a17, v11 AS a18 ORDER BY 0; 
WITH RECURSIVE v11 AS ( SELECT 18446744073709551615 y ORDER BY 10 ) SELECT * FROM v11 AS a19 ORDER BY 10; 
SELECT * FROM v0 AS a20 ORDER BY 255; 
SELECT * FROM v11 AS a21 ORDER BY 18446744073709551615; 
SELECT * FROM v0 AS a22 ORDER BY 0; 
