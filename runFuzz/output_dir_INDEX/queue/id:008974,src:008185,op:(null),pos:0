CREATE TABLE v0 ( c1 INTEGER PRIMARY KEY, c2 ); 
CREATE VIRTUAL TABLE v3 USING rtree ( c4, c5, c6 ); 
INSERT INTO v0 VALUES ( 16, 'v0' ), ( 16, 16, hex ( 18446744073709551615 ) ), ( 16, '3' ); 
CREATE INDEX i7 ON v0 ( c2 ); 
ALTER TABLE v0 DROP COLUMN c2; 
CREATE INDEX i8 ON v3 ( c5 ); 
BEGIN; 
INSERT INTO v3 VALUES ( 16, 16, 0 ), ( 18446744073709551615, 16, 18446744073709551615 ), ( 18446744073709551615, 16, 16 ); 
CREATE TRIGGER r1 AFTER UPDATE ON v0 BEGIN DELETE FROM v0 WHERE c1 = c2; END; 
ALTER TABLE v0 RENAME TO v9; 
CREATE INDEX i10 ON v9 ( c2 ); 
CREATE INDEX i11 ON v9 ( c2 ); 
CREATE INDEX i12 ON v9 ( c2 ); 
UPDATE v3 SET c2 = 't2' WHERE c2 = 16; 
SELECT * FROM v9 AS a13 ORDER BY 1; 
SELECT ( SELECT min ( ) OVER ( ORDER BY 16 ) ORDER BY 18446744073709551488 ) FROM v3 AS a14 GROUP BY y ( a14.c2 ) ORDER BY 127; 
WITH RECURSIVE v9 ( c16 ) AS ( SELECT 18446744071562067968 ORDER BY 16 ) SELECT v9.c1, max ( v9.c2 || c16 ) FROM v3 AS a15 WHERE ( v9.c1 || v9.c1 || v9.c1 ) != 'v1' ORDER BY 16; 
SELECT * FROM v9 AS a17 GROUP BY a17.c1, a17.c1 < a17.c2 ORDER BY 16; 
SELECT * FROM v3 AS a18 ORDER BY CASE WHEN a18.c2 != 'v' THEN 18446744073709551615 ELSE 18446744071562067968 END; 
WITH v19 ( c21 ) AS ( SELECT 'x' ORDER BY 18446744073709551615 ) SELECT * FROM v19 AS a20 ORDER BY ( c21 + 16 ) % count ( c21 ); 
SELECT * FROM v9 AS a22 WHERE a22.c2 = a22.c1 || a22.c1 ORDER BY 2147483647; 
SELECT * FROM v3 AS a23 NATURAL JOIN v3 AS a24 ORDER BY 16; 
SELECT * FROM v9 AS a25 ORDER BY 255; 
SELECT * FROM v3 AS a26 WHERE a26.c4 = - 127 ORDER BY 2147483647; 
