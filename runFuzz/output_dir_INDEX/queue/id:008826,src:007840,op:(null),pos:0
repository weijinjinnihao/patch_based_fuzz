CREATE TABLE v0 ( c1, c2, c3, c4, c5, c6 AS( c1 + c10 - c19 ) NOT NULL, c7, c8, c9, c10 INT UNIQUE ON CONFLICT IGNORE, c11, c12, c13, c14, c15, c16, c17, c18, c19 NOT NULL DEFAULT 0, c20 NOT NULL ON CONFLICT REPLACE DEFAULT 8, c21 NOT NULL ON CONFLICT IGNORE DEFAULT 8, c22 NOT NULL ON CONFLICT ABORT DEFAULT 0 ); 
INSERT INTO v0 ( c22, c20, c6, c10, c3 ) VALUES ( 0, 8, 0, 100, 8 ); 
CREATE INDEX i23 ON v0 ( c20 ); 
CREATE INDEX i24 ON v0 ( c3 ); 
DELETE FROM v0; 
INSERT INTO v0 ( c15, c1, c3, c12, c14 ) VALUES ( 8, 8, 8, 0, 8 ); 
INSERT OR IGNORE INTO v0 ( c9, c17, c4, c10 ) VALUES ( 0, 0, 0, 0 ); 
INSERT OR REPLACE INTO v0 ( c10, c7, c2, c21, c19 ) VALUES ( 8, 8, NULL, 8, 18446744073709551488 ); 
INSERT OR ABORT INTO v0 ( c2, c3, c11, c13, c1, c21, c12, c22, c1, c15, c22, c19, c7, c1, c1 ) VALUES ( 8, 0, NULL, 100, 8 ); 
UPDATE OR IGNORE v0 SET c4 = NULL, c5 = c19, c1 = c22; 
PRAGMA quick_check ( 10 ); 
CREATE INDEX i25 ON v0 ( c16 ); 
UPDATE v0 SET c11 = NULL, c20 = c10, c19 = c4; 
CREATE INDEX i26 ON v0 ( c18 ); 
CREATE INDEX i27 ON v0 ( c9 ); 
INSERT OR ABORT INTO v0 ( c22, c15, c13, c14 ) VALUES ( 0, 9223372036854775807, 8, 8 ); 
WITH v28 ( c31, c32, c33, c34, c35, c36 ) AS ( SELECT 0 y ORDER BY 0 ) SELECT c35, count ( c34 ), c31 FROM v28 AS a29 RIGHT JOIN v28 AS a30 ON c34 = c35 y ORDER BY 0.100000; 
SELECT * FROM v0 AS a37 ORDER BY ( a37.c7 + - 0 ) % 18446744073709551488; 
SELECT * ORDER BY 18446744073709551488; 
SELECT a38.c13 FROM v0 AS a38 ORDER BY 8; 
SELECT a39.c10 FROM v0 AS a39 ORDER BY 8; 
SELECT * FROM v0 AS a40 ORDER BY 2147483647; 
WITH v0 ( c42 ) AS ( SELECT * ORDER BY 8 ) SELECT * FROM v0 AS a41 ORDER BY 8; 
WITH v0 ( c44 ) AS ( SELECT 0 ORDER BY 18446744073709551615 ) SELECT ( SELECT min ( ) OVER ( ORDER BY 0 ) ORDER BY 0 ) FROM v0 AS a43 GROUP BY a43.c18 ORDER BY 0; 
WITH v45 ( c47 ) AS ( SELECT 8 GROUP BY c14 HAVING automatic_index ( * ) >= 8 ORDER BY 8 ) SELECT * FROM v45 AS a46 ORDER BY 8; 
WITH v48 ( c50 ) AS ( SELECT c50 + ( SELECT max ( c50 ) FROM v48 AS a54 ORDER BY 8 ), c50 + ( SELECT c50 FROM v48 AS a53 ORDER BY 0 ), c50 + ( SELECT max ( c50 ) FROM v48 AS a52 ORDER BY 0 ) FROM v48 AS a51 ORDER BY 8 ) SELECT c50, UTF16le ( c50 ) AS y FROM v48 AS a49 GROUP BY c50 ORDER BY 16; 
